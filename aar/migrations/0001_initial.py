# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('address1', models.CharField(max_length=80, null=True, verbose_name=b'Address Line 1', blank=True)),
                ('address2', models.CharField(max_length=80, null=True, verbose_name=b'Address Line 2', blank=True)),
                ('address3', models.CharField(max_length=80, null=True, verbose_name=b'Address Line 3', blank=True)),
                ('address4', models.CharField(max_length=80, null=True, verbose_name=b'Address Line 4', blank=True)),
                ('address5', models.CharField(max_length=80, null=True, verbose_name=b'Address Line 5', blank=True)),
                ('townCity', models.CharField(max_length=80, null=True, verbose_name=b'Town/City', blank=True)),
                ('county', models.CharField(blank=True, max_length=20, null=True, choices=[(b'England', ((b'Avon', b'Avon'), (b'Bedfordshire', b'Bedfordshire'), (b'Berkshire', b'Berkshire'), (b'Buckinghamshire', b'Buckinghamshire'), (b'Cambridgeshire', b'Cambridgeshire'), (b'Cheshire', b'Cheshire'), (b'Cleveland', b'Cleveland'), (b'Cornwall', b'Cornwall'), (b'Cumbria', b'Cumbria'), (b'Derbyshire', b'Derbyshire'), (b'Devon', b'Devon'), (b'Dorset', b'Dorset'), (b'Durham', b'Durham'), (b'East Sussex', b'East Sussex'), (b'Essex', b'Essex'), (b'Gloucestershire', b'Gloucestershire'), (b'Hampshire', b'Hampshire'), (b'Herefordshire', b'Herefordshire'), (b'Hertfordshire', b'Hertfordshire'), (b'Isle of Wight', b'Isle of Wight'), (b'Kent', b'Kent'), (b'Lancashire', b'Lancashire'), (b'Leicestershire', b'Leicestershire'), (b'Lincolnshire', b'Lincolnshire'), (b'London', b'London'), (b'Merseyside', b'Merseyside'), (b'Middlesex', b'Middlesex'), (b'Norfolk', b'Norfolk'), (b'Northamptonshire', b'Northamptonshire'), (b'Northumberland', b'Northumberland'), (b'North Humberside', b'North Humberside'), (b'North Yorkshire', b'North Yorkshire'), (b'Nottinghamshire', b'Nottinghamshire'), (b'Oxfordshire', b'Oxfordshire'), (b'Rutland', b'Rutland'), (b'Shropshire', b'Shropshire'), (b'Somerset', b'Somerset'), (b'South Humberside', b'South Humberside'), (b'South Yorkshire', b'South Yorkshire'), (b'Staffordshire', b'Staffordshire'), (b'Suffolk', b'Suffolk'), (b'Surrey', b'Surrey'), (b'Tyne and Wear', b'Tyne and Wear'), (b'Warwickshire', b'Warwickshire'), (b'West Midlands', b'West Midlands'), (b'West Sussex', b'West Sussex'), (b'West Yorkshire', b'West Yorkshire'), (b'Wiltshire', b'Wiltshire'), (b'Worcestershire', b'Worcestershire'))), (b'Wales', ((b'Clwyd', b'Clwyd'), (b'Dyfed', b'Dyfed'), (b'Gwent', b'Gwent'), (b'Gwynedd', b'Gwynedd'), (b'Mid Glamorgan', b'Mid Glamorgan'), (b'Powys', b'Powys'), (b'South Glamorgan', b'South Glamorgan'), (b'West Glamorgan', b'West Glamorgan'))), (b'Scotland', ((b'Aberdeenshire', b'Aberdeenshire'), (b'Angus', b'Angus'), (b'Argyll', b'Argyll'), (b'Ayrshire', b'Ayrshire'), (b'Banffshire', b'Banffshire'), (b'Berwickshire', b'Berwickshire'), (b'Bute', b'Bute'), (b'Caithness', b'Caithness'), (b'Clackmannanshire', b'Clackmannanshire'), (b'Dumfriesshire', b'Dumfriesshire'), (b'Dunbartonshire', b'Dunbartonshire'), (b'East Lothian', b'East Lothian'), (b'Fife', b'Fife'), (b'Inverness-shire', b'Inverness-shire'), (b'Kincardineshire', b'Kincardineshire'), (b'Kinross-shire', b'Kinross-shire'), (b'Kirkcudbrightshire', b'Kirkcudbrightshire'), (b'Lanarkshire', b'Lanarkshire'), (b'Midlothian', b'Midlothian'), (b'Moray', b'Moray'), (b'Nairnshire', b'Nairnshire'), (b'Orkney', b'Orkney'), (b'Peeblesshire', b'Peeblesshire'), (b'Perthshire', b'Perthshire'), (b'Renfrewshire', b'Renfrewshire'), (b'Ross-shire', b'Ross-shire'), (b'Roxburghshire', b'Roxburghshire'), (b'Selkirkshire', b'Selkirkshire'), (b'Shetland', b'Shetland'), (b'Stirlingshire', b'Stirlingshire'), (b'Sutherland', b'Sutherland'), (b'West Lothian', b'West Lothian'), (b'Wigtownshire', b'Wigtownshire'))), (b'Northern Ireland', ((b'Antrim', b'Antrim'), (b'Armagh', b'Armagh'), (b'Down', b'Down'), (b'Fermanagh', b'Fermanagh'), (b'Londonderry', b'Londonderry'), (b'Tyrone', b'Tyrone')))])),
                ('postCode', models.CharField(blank=True, max_length=8, null=True, verbose_name=b'Post Code', validators=[django.core.validators.RegexValidator(regex=b'(\\b[A-Z]{1,2}[0-9][A-Z0-9]? [0-9][ABD-HJLNP-UW-Z]{2}\\b)', message=b'')])),
                ('country', models.CharField(blank=True, max_length=80, null=True, choices=[(b'Afghanistan', b'Afghanistan'), (b'Albania', b'Albania'), (b'Algeria', b'Algeria'), (b'Andorra', b'Andorra'), (b'Angola', b'Angola'), (b'Antigua & Deps', b'Antigua & Deps'), (b'Argentina', b'Argentina'), (b'Armenia', b'Armenia'), (b'Australia', b'Australia'), (b'Austria', b'Austria'), (b'Azerbaijan', b'Azerbaijan'), (b'Bahamas', b'Bahamas'), (b'Bahrain', b'Bahrain'), (b'Bangladesh', b'Bangladesh'), (b'Barbados', b'Barbados'), (b'Belarus', b'Belarus'), (b'Belgium', b'Belgium'), (b'Belize', b'Belize'), (b'Benin', b'Benin'), (b'Bhutan', b'Bhutan'), (b'Bolivia', b'Bolivia'), (b'Bosnia Herzegovina', b'Bosnia Herzegovina'), (b'Botswana', b'Botswana'), (b'Brazil', b'Brazil'), (b'Brunei', b'Brunei'), (b'Bulgaria', b'Bulgaria'), (b'Burkina', b'Burkina'), (b'Burundi', b'Burundi'), (b'Cambodia', b'Cambodia'), (b'Cameroon', b'Cameroon'), (b'Canada', b'Canada'), (b'Cape Verde', b'Cape Verde'), (b'Central African Rep', b'Central African Rep'), (b'Chad', b'Chad'), (b'Chile', b'Chile'), (b'China', b'China'), (b'Colombia', b'Colombia'), (b'Comoros', b'Comoros'), (b'Congo', b'Congo'), (b'Congo {Democratic Rep}', b'Congo {Democratic Rep}'), (b'Costa Rica', b'Costa Rica'), (b'Croatia', b'Croatia'), (b'Cuba', b'Cuba'), (b'Cyprus', b'Cyprus'), (b'Czech Republic', b'Czech Republic'), (b'Denmark', b'Denmark'), (b'Djibouti', b'Djibouti'), (b'Dominica', b'Dominica'), (b'Dominican Republic', b'Dominican Republic'), (b'East Timor', b'East Timor'), (b'Ecuador', b'Ecuador'), (b'Egypt', b'Egypt'), (b'El Salvador', b'El Salvador'), (b'Equatorial Guinea', b'Equatorial Guinea'), (b'Eritrea', b'Eritrea'), (b'Estonia', b'Estonia'), (b'Ethiopia', b'Ethiopia'), (b'Fiji', b'Fiji'), (b'Finland', b'Finland'), (b'France', b'France'), (b'Gabon', b'Gabon'), (b'Gambia', b'Gambia'), (b'Georgia', b'Georgia'), (b'Germany', b'Germany'), (b'Ghana', b'Ghana'), (b'Greece', b'Greece'), (b'Grenada', b'Grenada'), (b'Guatemala', b'Guatemala'), (b'Guinea', b'Guinea'), (b'Guinea-Bissau', b'Guinea-Bissau'), (b'Guyana', b'Guyana'), (b'Haiti', b'Haiti'), (b'Honduras', b'Honduras'), (b'Hungary', b'Hungary'), (b'Iceland', b'Iceland'), (b'India', b'India'), (b'Indonesia', b'Indonesia'), (b'Iran', b'Iran'), (b'Iraq', b'Iraq'), (b'Ireland {Republic}', b'Ireland {Republic}'), (b'Israel', b'Israel'), (b'Italy', b'Italy'), (b'Ivory Coast', b'Ivory Coast'), (b'Jamaica', b'Jamaica'), (b'Japan', b'Japan'), (b'Jordan', b'Jordan'), (b'Kazakhstan', b'Kazakhstan'), (b'Kenya', b'Kenya'), (b'Kiribati', b'Kiribati'), (b'Korea North', b'Korea North'), (b'Korea South', b'Korea South'), (b'Kosovo', b'Kosovo'), (b'Kuwait', b'Kuwait'), (b'Kyrgyzstan', b'Kyrgyzstan'), (b'Laos', b'Laos'), (b'Latvia', b'Latvia'), (b'Lebanon', b'Lebanon'), (b'Lesotho', b'Lesotho'), (b'Liberia', b'Liberia'), (b'Libya', b'Libya'), (b'Liechtenstein', b'Liechtenstein'), (b'Lithuania', b'Lithuania'), (b'Luxembourg', b'Luxembourg'), (b'Macedonia', b'Macedonia'), (b'Madagascar', b'Madagascar'), (b'Malawi', b'Malawi'), (b'Malaysia', b'Malaysia'), (b'Maldives', b'Maldives'), (b'Mali', b'Mali'), (b'Malta', b'Malta'), (b'Marshall Islands', b'Marshall Islands'), (b'Mauritania', b'Mauritania'), (b'Mauritius', b'Mauritius'), (b'Mexico', b'Mexico'), (b'Micronesia', b'Micronesia'), (b'Moldova', b'Moldova'), (b'Monaco', b'Monaco'), (b'Mongolia', b'Mongolia'), (b'Montenegro', b'Montenegro'), (b'Morocco', b'Morocco'), (b'Mozambique', b'Mozambique'), (b'Myanmar, {Burma}', b'Myanmar, {Burma}'), (b'Namibia', b'Namibia'), (b'Nauru', b'Nauru'), (b'Nepal', b'Nepal'), (b'Netherlands', b'Netherlands'), (b'New Zealand', b'New Zealand'), (b'Nicaragua', b'Nicaragua'), (b'Niger', b'Niger'), (b'Nigeria', b'Nigeria'), (b'Norway', b'Norway'), (b'Oman', b'Oman'), (b'Pakistan', b'Pakistan'), (b'Palau', b'Palau'), (b'Panama', b'Panama'), (b'Papua New Guinea', b'Papua New Guinea'), (b'Paraguay', b'Paraguay'), (b'Peru', b'Peru'), (b'Philippines', b'Philippines'), (b'Poland', b'Poland'), (b'Portugal', b'Portugal'), (b'Qatar', b'Qatar'), (b'Romania', b'Romania'), (b'Russian Federation', b'Russian Federation'), (b'Rwanda', b'Rwanda'), (b'St Kitts & Nevis', b'St Kitts & Nevis'), (b'St Lucia', b'St Lucia'), (b'Saint Vincent & the Grenadines', b'Saint Vincent & the Grenadines'), (b'Samoa', b'Samoa'), (b'San Marino', b'San Marino'), (b'Sao Tome & Principe', b'Sao Tome & Principe'), (b'Saudi Arabia', b'Saudi Arabia'), (b'Senegal', b'Senegal'), (b'Serbia', b'Serbia'), (b'Seychelles', b'Seychelles'), (b'Sierra Leone', b'Sierra Leone'), (b'Singapore', b'Singapore'), (b'Slovakia', b'Slovakia'), (b'Slovenia', b'Slovenia'), (b'Solomon Islands', b'Solomon Islands'), (b'Somalia', b'Somalia'), (b'South Africa', b'South Africa'), (b'South Sudan', b'South Sudan'), (b'Spain', b'Spain'), (b'Sri Lanka', b'Sri Lanka'), (b'Sudan', b'Sudan'), (b'Suriname', b'Suriname'), (b'Swaziland', b'Swaziland'), (b'Sweden', b'Sweden'), (b'Switzerland', b'Switzerland'), (b'Syria', b'Syria'), (b'Taiwan', b'Taiwan'), (b'Tajikistan', b'Tajikistan'), (b'Tanzania', b'Tanzania'), (b'Thailand', b'Thailand'), (b'Togo', b'Togo'), (b'Tonga', b'Tonga'), (b'Trinidad & Tobago', b'Trinidad & Tobago'), (b'Tunisia', b'Tunisia'), (b'Turkey', b'Turkey'), (b'Turkmenistan', b'Turkmenistan'), (b'Tuvalu', b'Tuvalu'), (b'Uganda', b'Uganda'), (b'Ukraine', b'Ukraine'), (b'United Arab Emirates', b'United Arab Emirates'), (b'United Kingdom', b'United Kingdom'), (b'United States', b'United States'), (b'Uruguay', b'Uruguay'), (b'Uzbekistan', b'Uzbekistan'), (b'Vanuatu', b'Vanuatu'), (b'Vatican City', b'Vatican City'), (b'Venezuela', b'Venezuela'), (b'Vietnam', b'Vietnam'), (b'Yemen', b'Yemen'), (b'Zambia', b'Zambia'), (b'Zimbabwe', b'Zimbabwe')])),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('day', models.BooleanField(default=False)),
                ('night', models.BooleanField(default=True)),
                ('address', models.ForeignKey(related_name=b'invitation', to='aar.Address')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=6, choices=[(b'Ms', b'Ms'), (b'Miss', b'Miss'), (b'Mrs', b'Mrs'), (b'Mr', b'Mr'), (b'Master', b'Master'), (b'Dr', b'Dr')])),
                ('firstName', models.CharField(max_length=80, verbose_name=b'First Name')),
                ('lastName', models.CharField(max_length=80, verbose_name=b'Last Name')),
                ('email', models.EmailField(max_length=75, null=True, blank=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(regex=b'^\\+?1?\\d{9,15}$', message=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.")])),
                ('address', models.ForeignKey(related_name=b'person', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='aar.Address', null=True)),
                ('invitation', models.ForeignKey(related_name=b'person', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='aar.Invitation', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
    ]
